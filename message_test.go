package main

import (
	"testing"
)

func TestMsgHeaderFromRaw(t *testing.T) {
	versionMsg := []byte{
		0xf9, 0xbe, 0xb4, 0xd9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, // ....version.....
		0x64, 0x00, 0x00, 0x00, 0x35, 0x8d, 0x49, 0x32, 0x62, 0xea, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // d...5.I2b.......
		0x00, 0x00, 0x00, 0x00, 0x11, 0xb2, 0xd0, 0x50, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // .......P........
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, // ................
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
		0x3b, 0x2e, 0xb3, 0x5d, 0x8c, 0xe6, 0x17, 0x65, 0x0f, 0x2f, 0x53, 0x61, 0x74, 0x6f, 0x73, 0x68, // ;..]...e./Satosh
		0x69, 0x3a, 0x30, 0x2e, 0x37, 0x2e, 0x32, 0x2f, 0xc0, 0x3e, 0x03, 0x00,
	}

	t.Run("Should return error when net is not valid", func(t *testing.T) {
		wrongNet := []byte{0x00, 0xbe, 0xb7, 0xaa}

		msg, _ := MsgHeaderFromRaw(wrongNet)
		if msg != nil {
			t.Errorf("MsgHeader: net 0x%x should NOT be valid\n", msg.net)
		}
	})

	t.Run("Should return error when net is not valid", func(t *testing.T) {
		wrongVersionMsg := versionMsg
		wrongVersionMsg[10] = 0xff

		msg, _ := MsgHeaderFromRaw(wrongVersionMsg)
		if msg != nil {
			t.Errorf("MsgHeader: command 0x%x should NOT be valid\n", msg.command)
		}
	})

	t.Run("Should return msgHeader when header is valid", func(t *testing.T) {
		_, err := MsgHeaderFromRaw(versionMsg)
		if err != nil {
			t.Errorf("Error should be nil: %v\n", err.Error())
		}
	})
}
